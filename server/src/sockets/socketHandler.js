// server/src/sockets/socketHandler.js
const userService = require('../services/userService');

const setupSocketHandlers = (io, onlineUsers) => {
  io.on('connection', (socket) => {
    console.log('‚úÖ –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);

    socket.on('user_online', async (userId) => {
      try {
        const user = await userService.findById(userId);
        if (user) {
          onlineUsers[userId] = socket;
          socket.userId = userId;
          socket.broadcast.emit('user_status_change', { userId, isOnline: true });
          socket.emit('auth:success', { user: { id: userId, username: user.username } });
        } else {
          socket.emit('auth:failed', { message: 'Invalid user ID' });
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        socket.emit('auth:failed', { message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
      }
    });

    socket.on('user_offline', () => {
      if (socket.userId) {
        const userId = socket.userId;
        delete onlineUsers[userId];
        console.log(`üî¥ ${userId} –≤—ã—à–µ–ª`);
        socket.broadcast.emit('user_status_change', { userId, isOnline: false });
      }
    });

    // === –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ö–û–ú–ù–ê–¢–´ ===
    socket.on('room:create', (data) => {
      const { roomId, targetId, initiatorId, initiatorName } = data;
      
      if (!socket.userId || socket.userId !== initiatorId) {
        return;
      }

      const targetSocket = onlineUsers[targetId];
      if (targetSocket) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        targetSocket.emit('room:create', {
          roomId,
          initiatorId,
          initiatorName
        });
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ—Ñ–ª–∞–π–Ω ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
        socket.emit('room:create:failed', { roomId, reason: 'user_offline' });
      }
    });

    socket.on('room:close', (data) => {
      const { roomId, userId } = data;
      // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º ‚Äî –∫–ª–∏–µ–Ω—Ç—ã —Å–∞–º–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç –∫–æ–º–Ω–∞—Ç–∞–º–∏
      console.log(`–ö–æ–º–Ω–∞—Ç–∞ ${roomId} –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
    });

    // === WebRTC —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–º–Ω–∞—Ç–∞–º) ===
    socket.on('webrtc:offer', (data) => {
      const { to, offer } = data;
      const targetSocket = onlineUsers[to];
      if (targetSocket && socket.userId) {
        targetSocket.emit('webrtc:offer', { 
          roomId: data.roomId, 
          offer, 
          from: socket.userId 
        });
      }
    });

    socket.on('webrtc:answer', (data) => {
      const { to, answer } = data;
      const targetSocket = onlineUsers[to];
      if (targetSocket && socket.userId) {
        targetSocket.emit('webrtc:answer', { 
          roomId: data.roomId, 
          answer, 
          from: socket.userId 
        });
      }
    });

    socket.on('webrtc:ice-candidate', (data) => {
      const { to, candidate } = data;
      const targetSocket = onlineUsers[to];
      if (targetSocket && socket.userId) {
        targetSocket.emit('webrtc:ice-candidate', { 
          candidate, 
          from: socket.userId 
        });
      }
    });

    socket.on('disconnect', () => {
      if (socket.userId) {
        const userId = socket.userId;
        delete onlineUsers[userId];
        console.log(`üî¥ ${userId} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
        io.emit('user_status_change', { userId, isOnline: false });
      }
    });
  });
};

module.exports = setupSocketHandlers;