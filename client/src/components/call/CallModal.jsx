// client/src/components/call/CallModal.jsx

import React, { useState, useEffect, useRef } from 'react';

export default function CallModal({ callWindow, onEndCall, onRetryCall }) {
  const modalRef = useRef(null);
  const [position, setPosition] = useState({ x: window.innerWidth / 2 - 150, y: 100 });
  const [isDragging, setIsDragging] = useState(false);
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleMouseDown = (e) => {
    // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if (e.target.closest('.call-modal-header')) {
      const rect = modalRef.current.getBoundingClientRect();
      setDragOffset({
        x: e.clientX - rect.left,
        y: e.clientY - rect.top
      });
      setIsDragging(true);
    }
    // –ö–ª–∏–∫ –ø–æ –∫—Ä–µ—Å—Ç–∏–∫—É –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
    if (e.target.classList.contains('modal-close')) {
      return;
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
  const handleMouseMove = (e) => {
    if (isDragging) {
      setPosition({
        x: e.clientX - dragOffset.x,
        y: e.clientY - dragOffset.y
      });
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –º—ã—à–∏
  const handleMouseUp = () => {
    setIsDragging(false);
  };

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (isDragging) {
      window.addEventListener('mousemove', handleMouseMove);
      window.addEventListener('mouseup', handleMouseUp);
      return () => {
        window.removeEventListener('mousemove', handleMouseMove);
        window.removeEventListener('mouseup', handleMouseUp);
      };
    }
  }, [isDragging, dragOffset]);

  return (
    <div
      ref={modalRef}
      className="call-modal"
      style={{
        left: `${position.x}px`,
        top: `${position.y}px`,
        cursor: isDragging ? 'grabbing' : 'default'
      }}
      onMouseDown={handleMouseDown}
    >
      <div className="call-modal-header">
        <span>–í—ã–∑–æ–≤: {callWindow.targetName}</span>
        <button className="modal-close" onClick={onEndCall} aria-label="–ó–∞–∫—Ä—ã—Ç—å">
          &times;
        </button>
      </div>

      <div className="call-modal-body">
        {callWindow.status === 'calling' && (
          <div className="call-status calling">üìû –ó–≤–æ–Ω–æ–∫...</div>
        )}
        {callWindow.status === 'offline' && (
          <div className="call-status offline">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Ç–∏</div>
        )}
        {callWindow.status === 'missed' && (
          <div className="call-status missed">–í—ã–∑–æ–≤ –Ω–µ –æ—Ç–≤–µ—á–µ–Ω</div>
        )}
      </div>

      <div className="call-modal-footer">
        {callWindow.status === 'calling' ? (
          <button className="call-modal-btn call-modal-btn--danger" onClick={onEndCall}>
            üìµ –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–∑–æ–≤
          </button>
        ) : (
          <button className="call-modal-btn call-modal-btn--success" onClick={onRetryCall}>
            üìû –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—ã–∑–æ–≤
          </button>
        )}
      </div>
    </div>
  );
}