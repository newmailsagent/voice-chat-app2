// client/src/App.jsx
import { useEffect, useState, useRef } from 'react';
import React from 'react';
import './App.css';
import { socket } from './services/socketService';
import { getWebRTCManager, resetWebRTCManager } from './services/WebrtcService';

// –°–µ—Ä–≤–∏—Å—ã –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
const addContact = async (userId, contactId) => {
  const response = await fetch('/api/contacts', {
    method: 'POST',
    credentials: 'include',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, contactId })
  });
  return response.json();
};

const fetchContacts = async (userId) => {
  const response = await fetch(`/api/contacts/${userId}`, {
    credentials: 'include'
  });
  return response.json();
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ (—Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
const getAvatarColor = (username) => '#cccccc';

function App() {
  const [currentUser, setCurrentUser] = useState(null);
  const [incomingCall, setIncomingCall] = useState(null);
  const [callStatus, setCallStatus] = useState('idle');
  const [loginId, setLoginId] = useState('');
  const [loginError, setLoginError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [localStream, setLocalStream] = useState(null);
  const [remoteStream, setRemoteStream] = useState(null);
  const [loginPassword, setLoginPassword] = useState('');
  const [isMicrophoneEnabled, setIsMicrophoneEnabled] = useState(false);
  const [isMicrophoneMuted, setIsMicrophoneMuted] = useState(false);
  const [audioInputs, setAudioInputs] = useState([]);
  const [lastCalledUserId, setLastCalledUserId] = useState(null);
  const [isRegistering, setIsRegistering] = useState(false);
  const [registerUsername, setRegisterUsername] = useState('');
  const [registerPassword, setRegisterPassword] = useState('');
  const [socketStatus, setSocketStatus] = useState('disconnected');

  // === –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –ö–û–ù–¢–ê–ö–¢–û–í ===
  const [contacts, setContacts] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [callWindow, setCallWindow] = useState(null);
  const callWindowRef = useRef(null);
  const dragOffset = useRef({ x: 0, y: 0 });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  const getDevices = async () => {
    try {
      const devices = await navigator.mediaDevices.enumerateDevices();
      const audioInputs = devices.filter(device => device.kind === 'audioinput');
      return { audioInputs };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
      return { audioInputs: [] };
    }
  };

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  const restoreSession = () => {
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
      try {
        const user = JSON.parse(savedUser);
        setCurrentUser(user);
        return user;
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', e);
        localStorage.removeItem('currentUser');
        return null;
      }
    }
    return null;
  };

  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
  const safeEmit = (event, data) => {
    if (!socket.connected) {
      console.warn('‚ö†Ô∏è –°–æ–∫–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...');
      socket.connect();
      setTimeout(() => {
        if (socket.connected) {
          socket.emit(event, data);
        } else {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', event);
        }
      }, 1000);
    } else {
      socket.emit(event, data);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  const loadContacts = async () => {
    if (!currentUser) return;
    const data = await fetchContacts(currentUser.id);
    if (data.success) {
      setContacts(data.contacts || []);
    }
  };

  // –ü–æ–∏—Å–∫ –ø–æ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  const handleSearchAllUsers = async (query) => {
    if (!query.trim()) {
      setSearchResults([]);
      return;
    }
    try {
      const response = await fetch('/api/users', {
        credentials: 'include'
      });
      const data = await response.json();
      if (data.success) {
        const filtered = data.users
          .filter(u => u.id !== currentUser.id)
          .filter(u => u.username.toLowerCase().includes(query.toLowerCase()));
        setSearchResults(filtered);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      setSearchResults([]);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã
  const handleAddContact = async (contactId, contactUsername) => {
    if (!currentUser) return;
    const result = await addContact(currentUser.id, contactId);
    if (result.success) {
      loadContacts();
      setSearchResults(prev => prev.filter(c => c.id !== contactId));
    } else {
      alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ' + result.message);
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    const initializeApp = async () => {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
      const user = restoreSession();
      setupSocketHandlers();
      if (user) {
        if (!socket.connected) {
          console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç...');
          socket.connect();
        } else {
          console.log('‚úÖ –°–æ–∫–µ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω');
          safeEmit('user_online', user.id);
        }
      }
    };

    initializeApp();

    return () => {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ App –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
      socket.off('connect');
      socket.off('disconnect');
      socket.off('connect_error');
      socket.off('auth:success');
      socket.off('auth:failed');
      socket.off('call:incoming');
      socket.off('call:accepted');
      socket.off('call:rejected');
      socket.off('call:end');
      socket.off('call:failed');
      socket.off('call:initiated');
      socket.off('webrtc:offer');
      socket.off('webrtc:answer');
      socket.off('webrtc:ice-candidate');
    };
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ
  useEffect(() => {
    if (currentUser) {
      loadContacts();
    }
  }, [currentUser]);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–∫–µ—Ç–∞
  const setupSocketHandlers = () => {
    socket.on('connect', () => {
      console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω ID:', socket.id);
      setSocketStatus('connected');
      const currentUser = JSON.parse(localStorage.getItem('currentUser'));
      if (currentUser?.id) {
        socket.emit('user_online', currentUser.id);
      }
    });

    socket.on('disconnect', (reason) => {
      console.log('üîå WebSocket –æ—Ç–∫–ª—é—á—ë–Ω:', reason);
      setSocketStatus('disconnected');
    });

    socket.on('connect_error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err);
      setSocketStatus('error');
    });

    socket.on('auth:success', (data) => {
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', data.user);
      setCurrentUser(data.user);
      setLoginError('');
      setIsLoading(false);
    });

    socket.on('auth:failed', (data) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', data.message);
      alert('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + data.message);
      setIsLoading(false);
    });

    socket.on('call:incoming', (data) => {
      console.log('üìû –í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤:', data);
      setIncomingCall(data);
    });

    socket.on('call:accepted', (data) => {
      console.log('‚úÖ –í—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç:', data);
      setCallStatus('in_call');
    });

    socket.on('call:rejected', (data) => {
      console.log('‚ùå –í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω');
      setCallStatus('idle');
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤');
    });

    socket.on('call:end', () => {
      console.log('üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω —É–¥–∞–ª—ë–Ω–Ω–æ');
      resetWebRTCManager();
      setCallStatus('idle');
      setRemoteStream(null);
      setLocalStream(null);
      setIsMicrophoneEnabled(false);
      setIsMicrophoneMuted(false);
      setCallWindow(null);
    });

    socket.on('call:failed', (data) => {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞:', data);
      setCallStatus('idle');
      setCallWindow(prev => prev ? { ...prev, status: 'missed' } : null);
      alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è: ${data.reason}`);
    });

    socket.on('call:initiated', (data) => {
      console.log('üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—ã–∑–æ–≤...');
    });

    socket.on('webrtc:offer', async (data) => {
      console.log('üì• [RTC] –ü–æ–ª—É—á–µ–Ω offer –æ—Ç:', data.from);
      const webrtcManager = getWebRTCManager(socket, currentUser?.id);
      if (webrtcManager) {
        await webrtcManager.handleOffer(data.offer, data.from);
      }
    });

    socket.on('webrtc:answer', async (data) => {
      console.log('üì• [RTC] –ü–æ–ª—É—á–µ–Ω answer –æ—Ç:', data.from);
      const webrtcManager = getWebRTCManager(socket, currentUser?.id);
      if (webrtcManager) {
        await webrtcManager.handleAnswer(data.answer);
      }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
socket.on('user_status_change', (data) => {
  const { userId, isOnline } = data;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–ø–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  setContacts(prev => 
    prev.map(contact => 
      contact.id === userId ? { ...contact, isOnline } : contact
    )
  );

  // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã)
  setSearchResults(prev => 
    prev.map(user => 
      user.id === userId ? { ...user, isOnline } : user
    )
  );
});

    socket.on('webrtc:ice-candidate', async (data) => {
      console.log('üì• [RTC] –ü–æ–ª—É—á–µ–Ω ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç:', data.from);
      const webrtcManager = getWebRTCManager(socket, currentUser?.id);
      if (webrtcManager) {
        await webrtcManager.addIceCandidate(data.candidate);
      }
    });
  };

  // –í—Ö–æ–¥
  const handleLogin = () => {
    if (!loginId.trim() || !loginPassword) {
      setLoginError('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –ø–∞—Ä–æ–ª—å');
      return;
    }

    setLoginError('');
    setIsLoading(true);

    fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username: loginId, password: loginPassword })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        console.log('‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        setCurrentUser(data.user);
        localStorage.setItem('currentUser', JSON.stringify(data.user));
        if (!socket.connected) {
          console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞...');
          socket.connect();
        }
        safeEmit('user_online', data.user.id);
        setIsLoading(false);
      } else {
        alert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + data.message);
        setIsLoading(false);
      }
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
      setIsLoading(false);
    });
  };

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  const handleRegister = async () => {
    if (!registerUsername || !registerPassword) {
      setLoginError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }
    if (registerUsername.length < 3 || registerPassword.length < 6) {
      setLoginError('–ò–º—è –æ—Ç 3 —Å–∏–º–≤–æ–ª–æ–≤, –ø–∞—Ä–æ–ª—å –æ—Ç 6');
      return;
    }

    setLoginError('');
    setIsLoading(true);

    try {
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username: registerUsername, password: registerPassword })
      });
      const data = await response.json();
      
      if (data.success) {
        alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.');
        setIsRegistering(false);
        setLoginId(registerUsername);
        setLoginPassword(registerPassword);
      } else {
        setLoginError(data.message);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      setLoginError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setIsLoading(false);
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const toggleMicrophone = () => {
    if (!localStream) return;
    const audioTracks = localStream.getAudioTracks();
    if (audioTracks.length > 0) {
      const track = audioTracks[0];
      track.enabled = !track.enabled;
      setIsMicrophoneMuted(!track.enabled);
    }
  };

  // –ò—Å—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤
  const handleCallUser = async (targetQuery) => {
    if (!currentUser) {
      alert('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É');
      return;
    }

    if (!socket.connected) {
      alert('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');
      socket.connect();
      return;
    }

    try {
      const response = await fetch(`/api/auth/user/online?query=${encodeURIComponent(targetQuery)}`);
      const data = await response.json();
      
      if (!data.isOnline) {
        setCallWindow({
          targetId: data.userId,
          targetName: targetQuery,
          status: 'offline'
        });
        return;
      }

      const targetUserId = data.userId;
      setLastCalledUserId(targetUserId);

      setCallWindow({
        targetId: targetUserId,
        targetName: targetQuery,
        status: 'calling'
      });

      resetWebRTCManager();
      const webrtcManager = getWebRTCManager(socket, currentUser.id);
      const stream = await webrtcManager.init();
      setLocalStream(stream);
      setIsMicrophoneEnabled(true);
      const devices = await getDevices();
      setAudioInputs(devices.audioInputs);

      setCallStatus('calling');
      const offer = await webrtcManager.createOffer(targetUserId);
      safeEmit('call:start', { targetUserId, offer });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–≤–æ–Ω–∫–∞:', error);
      setCallWindow({
        targetId: targetQuery,
        targetName: targetQuery,
        status: 'missed'
      });
      handleEndCall();
    }
  };

  // –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤
  const handleAcceptCall = async () => {
    if (!incomingCall) return;

    try {
      resetWebRTCManager();
      const webrtcManager = getWebRTCManager(socket, currentUser.id);
      webrtcManager.onRemoteStream = setRemoteStream;
      
      setLastCalledUserId(incomingCall.from);

      const stream = await webrtcManager.init();
      setLocalStream(stream);
      setIsMicrophoneEnabled(true);
      const devices = await getDevices();
      setAudioInputs(devices.audioInputs);

      await webrtcManager.handleOffer(incomingCall.offer, incomingCall.from);
      safeEmit('call:accept', { from: incomingCall.from });
      setIncomingCall(null);
      setCallStatus('in_call');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤: ' + error.message);
      handleEndCall();
    }
  };

  // –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤
  const handleRejectCall = () => {
    if (!incomingCall) return;
    safeEmit('call:reject', { from: incomingCall.from });
    setIncomingCall(null);
    setCallStatus('idle');
  };

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–∑–æ–≤
  const handleEndCall = () => {
    console.log('üì¥ –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–∑–æ–≤');
    resetWebRTCManager();
    setCallStatus('idle');
    setRemoteStream(null);
    setLocalStream(null);
    setIsMicrophoneEnabled(false);
    setIsMicrophoneMuted(false);

    if (incomingCall) {
      safeEmit('call:end', { target: incomingCall.from });
      setIncomingCall(null);
    } else if (lastCalledUserId) {
      safeEmit('call:end', { target: lastCalledUserId });
    }

    if (callWindow) {
      setCallWindow(prev => prev ? { ...prev, status: 'missed' } : null);
    }
  };

  // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –∏–∑ –æ–∫–Ω–∞
  const handleRetryCall = () => {
    if (callWindow?.targetId) {
      handleCallUser(callWindow.targetId);
    }
  };

  // –í—ã—Ö–æ–¥
  const handleLogout = () => {
    console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    if (currentUser) {
      safeEmit('user_offline', currentUser.id);
    }
    localStorage.removeItem('currentUser');
    setCurrentUser(null);
    handleEndCall();
    socket.disconnect();
  };

  // === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–ï–†–ï–ú–ï–©–ï–ù–ò–Ø –û–ö–ù–ê ===
  const startDrag = (e) => {
    if (e.target.classList.contains('call-window-header')) {
      const rect = callWindowRef.current.getBoundingClientRect();
      dragOffset.current = {
        x: e.clientX - rect.left,
        y: e.clientY - rect.top
      };
      document.addEventListener('mousemove', onDrag);
      document.addEventListener('mouseup', stopDrag);
    }
  };

  const onDrag = (e) => {
    if (callWindowRef.current) {
      callWindowRef.current.style.left = `${e.clientX - dragOffset.current.x}px`;
      callWindowRef.current.style.top = `${e.clientY - dragOffset.current.y}px`;
    }
  };

  const stopDrag = () => {
    document.removeEventListener('mousemove', onDrag);
    document.removeEventListener('mouseup', stopDrag);
  };

  // === –≠–ö–†–ê–ù –í–•–û–î–ê / –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===
  if (!currentUser) {
    return (
      <div className="App" style={{ padding: '20px', fontFamily: 'Arial' }}>
        <h1>üìû Besedka</h1>
        
        {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
        <div style={{ 
          marginBottom: '15px', 
          padding: '8px', 
          borderRadius: '4px',
          backgroundColor: socketStatus === 'connected' ? '#d4edda' : 
                         socketStatus === 'error' ? '#f8d7da' : '#fff3cd',
          color: socketStatus === 'connected' ? '#155724' : 
                socketStatus === 'error' ? '#721c24' : '#856404',
          border: `1px solid ${
            socketStatus === 'connected' ? '#c3e6cb' : 
            socketStatus === 'error' ? '#f5c6cb' : '#ffeaa7'
          }`
        }}>
          <strong>–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</strong> {
            socketStatus === 'connected' ? 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' :
            socketStatus === 'connecting' ? 'üü° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' :
            socketStatus === 'error' ? 'üî¥ –û—à–∏–±–∫–∞' : '‚ö™ –û—Ç–∫–ª—é—á–µ–Ω–æ'
          }
        </div>
        
        <div style={{ marginBottom: '20px' }}>
          <button
            onClick={() => setIsRegistering(false)}
            style={{
              padding: '8px 16px',
              backgroundColor: !isRegistering ? '#2196F3' : '#ccc',
              color: 'white',
              border: 'none',
              borderRadius: '4px 4px 0 0',
              cursor: 'pointer'
            }}
          >
            –í—Ö–æ–¥
          </button>
          <button
            onClick={() => setIsRegistering(true)}
            style={{
              padding: '8px 16px',
              backgroundColor: isRegistering ? '#2196F3' : '#ccc',
              color: 'white',
              border: 'none',
              borderRadius: '4px 4px 0 0',
              cursor: 'pointer'
            }}
          >
            –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
          </button>
        </div>

        {isRegistering ? (
          <form onSubmit={(e) => { e.preventDefault(); handleRegister(); }}>
            <input
              type="text"
              placeholder="–í–∞—à–µ –∏–º—è (—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ)"
              value={registerUsername}
              onChange={(e) => setRegisterUsername(e.target.value.trim())}
              onKeyPress={(e) => { if (e.key === 'Enter') handleRegister(); }}
              style={{ display: 'block', margin: '10px 0', padding: '10px', width: '300px' }}
            />
            <input
              type="password"
              placeholder="–ü–∞—Ä–æ–ª—å (–º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤)"
              value={registerPassword}
              onChange={(e) => setRegisterPassword(e.target.value)}
              onKeyPress={(e) => { if (e.key === 'Enter') handleRegister(); }}
              style={{ display: 'block', margin: '10px 0', padding: '10px', width: '300px' }}
            />
            <button 
              type="submit"
              disabled={isLoading}
              style={{ 
                padding: '10px 20px', 
                fontSize: '16px',
                backgroundColor: isLoading ? '#6c757d' : '#2196F3',
                cursor: isLoading ? 'not-allowed' : 'pointer'
              }}
            >
              {isLoading ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
            </button>
          </form>
        ) : (
          <form onSubmit={(e) => { e.preventDefault(); handleLogin(); }}>
            <input
              type="text"
              placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
              value={loginId}
              onChange={(e) => setLoginId(e.target.value.trim())}
              onKeyPress={(e) => { if (e.key === 'Enter') handleLogin(); }}
              disabled={isLoading}
              style={{ display: 'block', margin: '10px 0', padding: '10px', width: '300px' }}
            />
            <input
              type="password"
              placeholder="–ü–∞—Ä–æ–ª—å"
              value={loginPassword}
              onChange={(e) => setLoginPassword(e.target.value)}
              onKeyPress={(e) => { if (e.key === 'Enter') handleLogin(); }}
              disabled={isLoading}
              style={{ display: 'block', margin: '10px 0', padding: '10px', width: '300px' }}
            />
            <button 
              type="submit"
              disabled={isLoading} 
              style={{ 
                padding: '10px 20px', 
                fontSize: '16px',
                backgroundColor: isLoading ? '#6c757d' : '#2196F3',
                cursor: isLoading ? 'not-allowed' : 'pointer'
              }}
            >
              {isLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
            </button>
          </form>
        )}
        
        {loginError && <div style={{ color: 'red', marginTop: '10px' }}>{loginError}</div>}
      </div>
    );
  }

  // === –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° (–ü–û–°–õ–ï –í–•–û–î–ê) ===
  return (
    <div className="App" style={{ fontFamily: 'Arial', display: 'flex', height: '100vh' }}>
      {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: –ø—Ä–æ—Ñ–∏–ª—å + –∫–æ–Ω—Ç–∞–∫—Ç—ã */}
      <div style={{ 
        width: '300px', 
        display: 'flex', 
        flexDirection: 'column', 
        borderRight: '1px solid #eee',
        padding: '15px'
      }}>
        {/* –ü—Ä–æ—Ñ–∏–ª—å */}
        <div style={{ 
          display: 'flex', 
          justifyContent: 'space-between', 
          alignItems: 'center',
          padding: '0 0 15px 0',
          borderBottom: '1px solid #eee'
        }}>
          <div>
            <div><strong>{currentUser.username}</strong></div>
            <div style={{ fontSize: '12px', color: '#6c757d' }}>ID: {currentUser.id}</div>
          </div>
          <button
            onClick={handleLogout}
            style={{
              padding: '4px 8px',
              backgroundColor: '#f8f9fa',
              color: '#007bff',
              border: '1px solid #007bff',
              borderRadius: '4px',
              cursor: 'pointer',
              fontSize: '12px'
            }}
          >
            –í—ã–π—Ç–∏
          </button>
        </div>

        {/* –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
        <div style={{ marginBottom: '15px' }}>
          <div style={{ display: 'flex', gap: '5px' }}>
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === 'Enter') {
                  handleSearchAllUsers(searchQuery);
                }
              }}
              style={{ 
                flex: 1,
                padding: '8px',
                border: '1px solid #ccc',
                borderRadius: '4px'
              }}
            />
            <button
              onClick={() => handleSearchAllUsers(searchQuery)}
              style={{
                padding: '8px 12px',
                backgroundColor: '#007bff',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}
            >
              üîç
            </button>
          </div>
          <div style={{ maxHeight: '150px', overflowY: 'auto', marginTop: '8px' }}>
            {searchResults.map(user => (
              <div key={user.id} style={{ 
                display: 'flex', 
                justifyContent: 'space-between', 
                alignItems: 'center',
                padding: '8px 0',
                borderBottom: '1px solid #f0f0f0'
              }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                  <div style={{
                    width: '32px',
                    height: '32px',
                    borderRadius: '50%',
                    backgroundColor: getAvatarColor(user.username),
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    color: '#666',
                    fontWeight: 'bold'
                  }}>
                    {user.username[0]?.toUpperCase()}
                  </div>
                  <span>{user.username}</span>
                </div>
                <button
                  onClick={() => handleAddContact(user.id, user.username)}
                  style={{
                    padding: '4px 8px',
                    backgroundColor: '#28a745',
                    color: 'white',
                    border: 'none',
                    borderRadius: '4px',
                    cursor: 'pointer'
                  }}
                >
                  +
                </button>
              </div>
            ))}
          </div>
        </div>

        {/* –ö–æ–Ω—Ç–∞–∫—Ç—ã */}
        <div style={{ flex: 1, overflowY: 'auto' }}>
          <h3 style={{ margin: '0 0 10px 0' }}>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h3>
          {contacts.length === 0 ? (
            <div style={{ color: '#6c757d', fontStyle: 'italic' }}>–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</div>
          ) : (
            contacts.map(contact => (
              <div key={contact.id} style={{ 
                display: 'flex', 
                justifyContent: 'space-between', 
                alignItems: 'center',
                padding: '10px 0',
                borderBottom: '1px solid #f0f0f0'
              }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                  <div style={{
                    width: '40px',
                    height: '40px',
                    borderRadius: '50%',
                    backgroundColor: getAvatarColor(contact.username),
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    color: '#666',
                    fontWeight: 'bold'
                  }}>
                    {contact.username[0]?.toUpperCase()}
                  </div>
                  <div>
                    <div>{contact.username}</div>
                    <div style={{ 
                      fontSize: '12px', 
                      color: contact.isOnline ? '#28a745' : '#6c757d'
                    }}>
                      {contact.isOnline ? '–≤ —Å–µ—Ç–∏' : '–æ—Ñ—Ñ–ª–∞–π–Ω'}
                    </div>
                  </div>
                </div>
                <button
                  onClick={() => handleCallUser(contact.username)}
                  disabled={!contact.isOnline}
                  style={{
                    padding: '6px 10px',
                    backgroundColor: contact.isOnline ? '#007bff' : '#6c757d',
                    color: 'white',
                    border: 'none',
                    borderRadius: '4px',
                    cursor: contact.isOnline ? 'pointer' : 'not-allowed'
                  }}
                >
                  üìû
                </button>
              </div>
            ))
          )}
        </div>
      </div>

      {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å: —Å—Ç–∞—Ç—É—Å –∏ –∞—É–¥–∏–æ */}
      <div style={{ flex: 1, padding: '20px', display: 'flex', flexDirection: 'column' }}>
        <h1>üìû Besedka</h1>

        {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
        <div style={{ 
          marginBottom: '15px', 
          padding: '8px', 
          borderRadius: '4px',
          backgroundColor: socketStatus === 'connected' ? '#d4edda' : 
                         socketStatus === 'error' ? '#f8d7da' : '#fff3cd',
          color: socketStatus === 'connected' ? '#155724' : 
                socketStatus === 'error' ? '#721c24' : '#856404',
          border: `1px solid ${
            socketStatus === 'connected' ? '#c3e6cb' : 
            socketStatus === 'error' ? '#f5c6cb' : '#ffeaa7'
          }`
        }}>
          <strong>–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</strong> {
            socketStatus === 'connected' ? 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' :
            socketStatus === 'connecting' ? 'üü° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' :
            socketStatus === 'error' ? 'üî¥ –û—à–∏–±–∫–∞' : '‚ö™ –û—Ç–∫–ª—é—á–µ–Ω–æ'
          }
          {socketStatus !== 'connected' && (
            <button 
              onClick={() => socket.connect()}
              style={{
                marginLeft: '10px',
                padding: '4px 8px',
                backgroundColor: '#17a2b8',
                color: 'white',
                border: 'none',
                borderRadius: '3px',
                cursor: 'pointer',
                fontSize: '12px'
              }}
            >
              –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            </button>
          )}
        </div>

        <div style={{ marginBottom: '20px' }}>
          <strong>–°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞: </strong>
          {callStatus === 'idle' && <span>üü¢ –û–Ω–ª–∞–π–Ω</span>}
          {callStatus === 'calling' && <span>üü° –ó–≤–æ–Ω–æ–∫...</span>}
          {callStatus === 'in_call' && <span>üî¥ –í –∑–≤–æ–Ω–∫–µ</span>}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –≤–∫–ª/–≤—ã–∫–ª –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ */}
        {callStatus === 'in_call' && (
          <div style={{ marginBottom: '20px' }}>
            <button
              onClick={toggleMicrophone}
              style={{
                padding: '10px 20px',
                backgroundColor: isMicrophoneMuted ? '#6c757d' : '#17a2b8',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}
            >
              {isMicrophoneMuted ? 'üîá –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω' : 'üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á—ë–Ω'}
            </button>
          </div>
        )}

        {/* –°–µ–ª–µ–∫—Ç–æ—Ä –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤ */}
        {callStatus === 'in_call' && localStream && audioInputs.length > 0 && (
          <div style={{ marginBottom: '20px' }}>
            <label>
              –ú–∏–∫—Ä–æ—Ñ–æ–Ω:
              <select onChange={async (e) => {
                const deviceId = e.target.value;
                const newStream = await navigator.mediaDevices.getUserMedia({
                  audio: { deviceId: { exact: deviceId } },
                  video: false
                });
                const oldAudioTrack = localStream.getAudioTracks()[0];
                localStream.removeTrack(oldAudioTrack);
                oldAudioTrack.stop();
                const newAudioTrack = newStream.getAudioTracks()[0];
                localStream.addTrack(newAudioTrack);
                const webrtcManager = getWebRTCManager(socket, currentUser.id);
                if (webrtcManager?.peerConnection) {
                  webrtcManager.peerConnection.removeTrack(oldAudioTrack);
                  webrtcManager.peerConnection.addTrack(newAudioTrack, localStream);
                }
              }} style={{ marginLeft: '10px', padding: '5px' }}>
                {audioInputs.map(device => (
                  <option key={device.deviceId} value={device.deviceId}>
                    {device.label || `–ú–∏–∫—Ä–æ—Ñ–æ–Ω ${device.deviceId.slice(0, 5)}`}
                  </option>
                ))}
              </select>
            </label>
          </div>
        )}

        {/* –ê—É–¥–∏–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ */}
        {remoteStream && (
          <div style={{ marginBottom: '30px' }}>
            <h4>üîä –ê—É–¥–∏–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞</h4>
            <audio
              ref={audio => { if (audio) audio.srcObject = remoteStream; }}
              autoPlay
              style={{ width: '100%', height: '50px', border: '2px solid blue', borderRadius: '8px' }}
            />
          </div>
        )}

        {callStatus === 'in_call' && (
          <button
            onClick={handleEndCall}
            style={{
              padding: '12px 24px',
              fontSize: '18px',
              backgroundColor: '#f44336',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              cursor: 'pointer',
              marginBottom: '20px'
            }}
          >
            üìµ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫
          </button>
        )}

        {/* –í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤ */}
        {incomingCall && (
          <div style={{
            background: '#fff3cd',
            border: '2px solid #ffeaa7',
            padding: '20px',
            borderRadius: '8px',
            marginTop: '20px'
          }}>
            <h3>üìû –í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤!</h3>
            <p><strong>–û—Ç:</strong> {incomingCall.fromUsername} (ID: {incomingCall.from})</p>
            <div>
              <button
                onClick={handleAcceptCall}
                style={{
                  padding: '10px 20px',
                  backgroundColor: '#4CAF50',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  marginRight: '10px'
                }}
              >
                ‚úÖ –ü—Ä–∏–Ω—è—Ç—å
              </button>
              <button
                onClick={handleRejectCall}
                style={{
                  padding: '10px 20px',
                  backgroundColor: '#f44336',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: 'pointer'
                }}
              >
                ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        )}
      </div>

      {/* === –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –í–´–ó–û–í–ê === */}
      {callWindow && (
        <div 
          ref={callWindowRef}
          onMouseDown={startDrag}
          style={{
            position: 'fixed',
            top: '100px',
            left: '50%',
            transform: 'translateX(-50%)',
            backgroundColor: 'white',
            border: '2px solid #007bff',
            borderRadius: '8px',
            padding: '15px',
            width: '300px',
            boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
            zIndex: 1000,
            cursor: 'move'
          }}
        >
          <div className="call-window-header" style={{ 
            fontWeight: 'bold', 
            marginBottom: '10px',
            cursor: 'move'
          }}>
            –í—ã–∑–æ–≤: {callWindow.targetName}
          </div>
          
          <div style={{ marginBottom: '15px' }}>
            {callWindow.status === 'calling' && (
              <div style={{ color: '#007bff' }}>üìû –ó–≤–æ–Ω–æ–∫...</div>
            )}
            {callWindow.status === 'offline' && (
              <div style={{ color: '#6c757d' }}>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Ç–∏</div>
            )}
            {callWindow.status === 'missed' && (
              <div style={{ color: '#dc3545' }}>–í—ã–∑–æ–≤ –Ω–µ –æ—Ç–≤–µ—á–µ–Ω</div>
            )}
          </div>

          {callWindow.status === 'calling' ? (
            <button
              onClick={handleEndCall}
              style={{
                width: '100%',
                padding: '10px',
                backgroundColor: '#f44336',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}
            >
              üìµ –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–∑–æ–≤
            </button>
          ) : (
            <button
              onClick={handleRetryCall}
              style={{
                width: '100%',
                padding: '10px',
                backgroundColor: '#28a745',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}
            >
              üìû –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—ã–∑–æ–≤
            </button>
          )}
        </div>
      )}
    </div>
  );
}

export default App;