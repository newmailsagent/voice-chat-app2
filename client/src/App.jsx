import { useEffect, useState, useRef } from 'react';
import './App.css';
import { socket } from './services/socketService';
import { getWebRTCManager, resetWebRTCManager } from './services/webrtcService';

const socket = io('https://pobesedka.ru', {
  transports: ['websocket'],
  secure: true
});

function App() {
  const [users, setUsers] = useState([]);
  const [currentUser, setCurrentUser] = useState(null);
  const [incomingCall, setIncomingCall] = useState(null);
  const [callStatus, setCallStatus] = useState('idle'); // 'idle' | 'calling' | 'in_call'
  const [loginId, setLoginId] = useState('');
  const [loginError, setLoginError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [localStream, setLocalStream] = useState(null);
  const [remoteStream, setRemoteStream] = useState(null);
  const [loginPassword, setLoginPassword] = useState('');
  const [isMicrophoneEnabled, setIsMicrophoneEnabled] = useState(false); // ‚úÖ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è
  const [isMicrophoneMuted, setIsMicrophoneMuted] = useState(false);
  const [audioInputs, setAudioInputs] = useState([]);
  const [lastCalledUserId, setLastCalledUserId] = useState(null);
  const [callTargetId, setCallTargetId] = useState('');
  const [isRegistering, setIsRegistering] = useState(false);
  const [registerUsername, setRegisterUsername] = useState('');
  const [registerPassword, setRegisterPassword] = useState('');

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  const getDevices = async () => {
    try {
      const devices = await navigator.mediaDevices.enumerateDevices();
      const audioInputs = devices.filter(device => device.kind === 'audioinput');
      return { audioInputs };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
      return { audioInputs: [] };
    }
  };

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  const restoreSession = () => {
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
      try {
        const user = JSON.parse(savedUser);
        setCurrentUser(user);
          socket.emit('user_online', user.id);
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', e);
        localStorage.removeItem('currentUser');
      }
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–∫–µ—Ç-—Å–æ–±—ã—Ç–∏—è
  useEffect(() => {
    restoreSession();

    socket.on('auth:success', (data) => {
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', data.user);
      setCurrentUser(data.user);
      setLoginError('');
      setIsLoading(false);
    });

    socket.on('auth:failed', (data) => {
      alert('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + data.message);
      setIsLoading(false);
    });

    socket.on('call:incoming', (data) => {
      console.log('üìû –í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤:', data);
      setIncomingCall(data);
    });

    socket.on('call:accepted', (data) => {
      console.log('‚úÖ –í—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç:', data);
      setCallStatus('in_call');
    });

    socket.on('call:rejected', (data) => {
      console.log('‚ùå –í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω');
      setCallStatus('idle');
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤');
    });

    socket.on('call:end', () => {
  console.log('üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω —É–¥–∞–ª—ë–Ω–Ω–æ');
  
  resetWebRTCManager();
  const webrtcManager = getWebRTCManager(socket, currentUser.id);
  
  setCallStatus('idle');
  setRemoteStream(null);
  setLocalStream(null);
  setIsMicrophoneEnabled(false);
  setIsMicrophoneMuted(false);
});

    socket.on('call:failed', (data) => {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞:', data);
      setCallStatus('idle');
      alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è: ${data.reason}`);
    });

    socket.on('call:initiated', (data) => {
      console.log('üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—ã–∑–æ–≤...');
    });

    socket.on('webrtc:offer', async (data) => {
      console.log('üì• [RTC] –ü–æ–ª—É—á–µ–Ω offer –æ—Ç:', data.from);
      if (webrtcManager.current) {
        await webrtcManager.current.handleOffer(data.offer, data.from);
      }
    });

    socket.on('webrtc:answer', async (data) => {
      console.log('üì• [RTC] –ü–æ–ª—É—á–µ–Ω answer –æ—Ç:', data.from);
      if (webrtcManager.current) {
        await webrtcManager.current.handleAnswer(data.answer);
      }
    });

    socket.on('webrtc:ice-candidate', async (data) => {
      console.log('üì• [RTC] –ü–æ–ª—É—á–µ–Ω ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç:', data.from);
      if (webrtcManager.current) {
        await webrtcManager.current.addIceCandidate(data.candidate);
      }
    });

    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∫–µ—Ç–∞
socket.on('connect', () => {
  console.log('üîå –°–æ–∫–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á—ë–Ω');
  if (currentUser) {
    socket.emit('user_online', currentUser.id);
  }
});

    return () => {
      socket.off('auth:success');
      socket.off('auth:failed');
      socket.off('call:incoming');
      socket.off('call:accepted');
      socket.off('call:rejected');
      socket.off('call:failed');
      socket.off('call:initiated');
      socket.off('webrtc:offer');
      socket.off('webrtc:answer');
      socket.off('webrtc:ice-candidate');
      socket.off('call:end');
    };
  }, []);

  // –í—Ö–æ–¥
  const handleLogin = () => {
    if (!loginId.trim() || !loginPassword) {
      setLoginError('–í–≤–µ–¥–∏—Ç–µ ID –∏ –ø–∞—Ä–æ–ª—å');
      return;
    }

    setLoginError('');
    setIsLoading(true);

    fetch('https://pobesedka.ru/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username: loginId, password: loginPassword })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        socket.emit('user_online', data.user.id);
        setCurrentUser(data.user);
        localStorage.setItem('currentUser', JSON.stringify(data.user));
        setIsLoading(false);
      } else {
        alert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + data.message);
        setIsLoading(false);
      }
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
      setIsLoading(false);
    });
  };

  //–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  const handleRegister = async () => {
  if (!registerUsername || !registerPassword) {
    setLoginError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
    return;
  }
  if (registerUsername.length < 3 || registerPassword.length < 6) {
    setLoginError('–ò–º—è –æ—Ç 3 —Å–∏–º–≤–æ–ª–æ–≤, –ø–∞—Ä–æ–ª—å –æ—Ç 6');
    return;
  }

  setLoginError('');
  setIsLoading(true);

  try {
    const response = await fetch('https://pobesedka.ru/api/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username: registerUsername, password: registerPassword })
    });
    const data = await response.json();
    
    if (data.success) {
      alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.');
      setIsRegistering(false);
      setLoginId(registerUsername);
      setLoginPassword(registerPassword);
    } else {
      setLoginError(data.message);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    setLoginError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
  } finally {
    setIsLoading(false);
  }
};

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const toggleMicrophone = () => {
    if (!localStream) return;
    const audioTracks = localStream.getAudioTracks();
    if (audioTracks.length > 0) {
      const track = audioTracks[0];
      track.enabled = !track.enabled;
      setIsMicrophoneMuted(!track.enabled);
    }
  };

// –ò—Å—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤
const handleCallUser = async (targetQuery) => {
  if (!currentUser) {
    alert('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É');
    return;
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å –ø–æ username –∏–ª–∏ id
    const response = await fetch(`https://pobesedka.ru/api/user/online?query=${encodeURIComponent(targetQuery)}`);
    const data = await response.json();
    
    if (!data.isOnline) {
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Ç–∏');
      return;
    }

    const targetUserId = data.userId;
    setLastCalledUserId(targetUserId); // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º

    // –ù–æ–≤—ã–π
    resetWebRTCManager();
    const webrtcManager = getWebRTCManager(socket, currentUser.id);
    
    const stream = await webrtcManager.current.init();
    
    
    setLocalStream(stream);
    setIsMicrophoneEnabled(true);
    
    // ‚úÖ –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤
    const devices = await getDevices();
    setAudioInputs(devices.audioInputs);

    setCallStatus('calling');
    const offer = await webrtcManager.current.createOffer(targetUserId);
    socket.emit('call:start', { targetUserId, offer });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–≤–æ–Ω–∫–∞:', error);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–≤–æ–Ω–æ–∫: ' + (error.message || '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ'));
    handleEndCall();
  }
};

 // –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤
const handleAcceptCall = async () => {
  if (!incomingCall) return;

  try {
    // ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π WebRTC-–º–µ–Ω–µ–¥–∂–µ—Ä, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    resetWebRTCManager();
    const webrtcManager = getWebRTCManager(socket, currentUser.id);
    
    setLastCalledUserId(incomingCall.from); // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º

    // ‚úÖ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π WebRTC-–º–µ–Ω–µ–¥–∂–µ—Ä
    webrtcManager.current = new WebRTCManager(socket, currentUser.id);
    webrtcManager.current.onRemoteStream = setRemoteStream;
    
    const stream = await webrtcManager.current.init();
    setLocalStream(stream);
    setIsMicrophoneEnabled(true);
    
    // ‚úÖ –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤
    const devices = await getDevices();
    setAudioInputs(devices.audioInputs);

    await webrtcManager.current.handleOffer(incomingCall.offer, incomingCall.from);
    socket.emit('call:accept', { from: incomingCall.from });
    setIncomingCall(null);
    setCallStatus('in_call');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞:', error);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤: ' + error.message);
    // ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    handleEndCall();
  }
};

  // –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤
  const handleRejectCall = () => {
    if (!incomingCall) return;
    socket.emit('call:reject', { from: incomingCall.from });
    setIncomingCall(null);
    setCallStatus('idle');
  };

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–∑–æ–≤
  const handleEndCall = () => {
    console.log('üì¥ –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–∑–æ–≤');

    resetWebRTCManager();
    const webrtcManager = getWebRTCManager(socket, currentUser.id);
    
    setCallStatus('idle');
    setRemoteStream(null);
    setLocalStream(null);
    setIsMicrophoneEnabled(false);
    setIsMicrophoneMuted(false);

     if (incomingCall) {
    socket.emit('call:end', { target: incomingCall.from });
  } else if (lastCalledUserId) {
    socket.emit('call:end', { target: lastCalledUserId });
  }
  };

  // –≠–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
if (!currentUser) {
  return (
    <div className="App" style={{ padding: '20px', fontFamily: 'Arial' }}>
      <h1>üìû Besedka</h1>
      
      {/* –í–∫–ª–∞–¥–∫–∏: –í—Ö–æ–¥ / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è */}
      <div style={{ marginBottom: '20px' }}>
        <button
          onClick={() => setIsRegistering(false)}
          style={{
            padding: '8px 16px',
            backgroundColor: !isRegistering ? '#2196F3' : '#ccc',
            color: 'white',
            border: 'none',
            borderRadius: '4px 4px 0 0',
            cursor: 'pointer'
          }}
        >
          –í—Ö–æ–¥
        </button>
        <button
          onClick={() => setIsRegistering(true)}
          style={{
            padding: '8px 16px',
            backgroundColor: isRegistering ? '#2196F3' : '#ccc',
            color: 'white',
            border: 'none',
            borderRadius: '4px 4px 0 0',
            cursor: 'pointer'
          }}
        >
          –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        </button>
      </div>

      {isRegistering ? (
        // –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        <div>
          <input
            type="text"
            placeholder="–í–∞—à–µ –∏–º—è (—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ)"
            value={registerUsername}
            onChange={(e) => setRegisterUsername(e.target.value.trim())}
            style={{ display: 'block', margin: '10px 0', padding: '10px', width: '300px' }}
          />
          <input
            type="password"
            placeholder="–ü–∞—Ä–æ–ª—å (–º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤)"
            value={registerPassword}
            onChange={(e) => setRegisterPassword(e.target.value)}
            style={{ display: 'block', margin: '10px 0', padding: '10px', width: '300px' }}
          />
          <button onClick={handleRegister} style={{ padding: '10px 20px', fontSize: '16px' }}>
            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
          </button>
        </div>
      ) : (
        // –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
        <div>
          <input
            type="text"
            placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            value={loginId}
            onChange={(e) => setLoginId(e.target.value.trim())}
            disabled={isLoading}
            style={{ display: 'block', margin: '10px 0', padding: '10px', width: '300px' }}
          />
          <input
            type="password"
            placeholder="–ü–∞—Ä–æ–ª—å"
            value={loginPassword}
            onChange={(e) => setLoginPassword(e.target.value)}
            disabled={isLoading}
            style={{ display: 'block', margin: '10px 0', padding: '10px', width: '300px' }}
          />
          <button onClick={handleLogin} disabled={isLoading} style={{ padding: '10px 20px', fontSize: '16px' }}>
            {isLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
          </button>
        </div>
      )}
      
      {loginError && <div style={{ color: 'red', marginTop: '10px' }}>{loginError}</div>}
    </div>
  );
}

  // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  return (
    <div className="App" style={{ padding: '20px', fontFamily: 'Arial' }}>
      <h1>üìû Besedka</h1>

      <div style={{ marginBottom: '20px' }}>
        <strong>–í—ã –≤–æ—à–ª–∏ –∫–∞–∫:</strong> {currentUser.username} (ID: {currentUser.id})
        <button
          onClick={() => {
            localStorage.removeItem('currentUser');
            setCurrentUser(null);
          }}
          style={{
            marginLeft: '15px',
            padding: '6px 12px',
            backgroundColor: '#6c757d',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer'
          }}
        >
          –í—ã–π—Ç–∏
        </button>
      </div>

      <div style={{ marginBottom: '20px' }}>
        <strong>–°—Ç–∞—Ç—É—Å: </strong>
        {callStatus === 'idle' && <span>üü¢ –û–Ω–ª–∞–π–Ω</span>}
        {callStatus === 'calling' && <span>üü° –ó–≤–æ–Ω–æ–∫...</span>}
        {callStatus === 'in_call' && <span>üî¥ –í –∑–≤–æ–Ω–∫–µ</span>}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –≤–∫–ª/–≤—ã–∫–ª –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ */}
      {callStatus === 'in_call' && (
        <div style={{ marginBottom: '20px' }}>
          <button
            onClick={toggleMicrophone}
            style={{
              padding: '10px 20px',
              backgroundColor: isMicrophoneMuted ? '#6c757d' : '#17a2b8',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer'
            }}
          >
            {isMicrophoneMuted ? 'üîá –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω' : 'üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á—ë–Ω'}
          </button>
        </div>
      )}

      {/* –°–µ–ª–µ–∫—Ç–æ—Ä –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤ */}
      {callStatus === 'in_call' && localStream && audioInputs.length > 0 && (
        <div style={{ marginBottom: '20px' }}>
          <label>
            –ú–∏–∫—Ä–æ—Ñ–æ–Ω:
            <select onChange={async (e) => {
              const deviceId = e.target.value;
              const newStream = await navigator.mediaDevices.getUserMedia({
                audio: { deviceId: { exact: deviceId } },
                video: false
              });
              const oldAudioTrack = localStream.getAudioTracks()[0];
              localStream.removeTrack(oldAudioTrack);
              oldAudioTrack.stop();
              const newAudioTrack = newStream.getAudioTracks()[0];
              localStream.addTrack(newAudioTrack);
              if (webrtcManager.current?.peerConnection) {
                webrtcManager.current.peerConnection.removeTrack(oldAudioTrack);
                webrtcManager.current.peerConnection.addTrack(newAudioTrack, localStream);
              }
            }} style={{ marginLeft: '10px', padding: '5px' }}>
              {audioInputs.map(device => (
                <option key={device.deviceId} value={device.deviceId}>
                  {device.label || `–ú–∏–∫—Ä–æ—Ñ–æ–Ω ${device.deviceId.slice(0, 5)}`}
                </option>
              ))}
            </select>
          </label>
        </div>
      )}

      {/* –ê—É–¥–∏–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ */}
      {remoteStream && (
        <div style={{ marginBottom: '30px' }}>
          <h4>üîä –ê—É–¥–∏–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞</h4>
          <audio
            ref={audio => { if (audio) audio.srcObject = remoteStream; }}
            autoPlay
            style={{ width: '100%', height: '50px', border: '2px solid blue', borderRadius: '8px' }}
          />
        </div>
      )}

      {callStatus === 'in_call' && (
        <button
          onClick={handleEndCall}
          style={{
            padding: '12px 24px',
            fontSize: '18px',
            backgroundColor: '#f44336',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            cursor: 'pointer',
            marginBottom: '20px'
          }}
        >
          üìµ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫
        </button>
      )}

{/* –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
<div style={{ marginBottom: '20px' }}>
  <input
    type="text"
    placeholder="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–≤–æ–Ω–∫–∞"
    value={callTargetId}
    onChange={(e) => setCallTargetId(e.target.value.trim())}
    disabled={callStatus !== 'idle'}
    style={{ padding: '10px', fontSize: '16px', marginRight: '10px', width: '250px' }}
  />
  <button
    onClick={() => handleCallUser(callTargetId)}
    disabled={!callTargetId || callStatus !== 'idle'}
    style={{
      padding: '10px 15px',
      backgroundColor: '#2196F3',
      color: 'white',
      border: 'none',
      borderRadius: '4px',
      cursor: (!callTargetId || callStatus !== 'idle') ? 'not-allowed' : 'pointer'
    }}
  >
    –ü–æ–∑–≤–æ–Ω–∏—Ç—å
  </button>
</div>

      {/* –í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤ */}
      {incomingCall && (
        <div style={{
          background: '#fff3cd',
          border: '2px solid #ffeaa7',
          padding: '20px',
          borderRadius: '8px',
          marginTop: '20px'
        }}>
          <h3>üìû –í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤!</h3>
          <p><strong>–û—Ç:</strong> {incomingCall.fromUsername} (ID: {incomingCall.from})</p>
          <div>
            <button
              onClick={handleAcceptCall}
              style={{
                padding: '10px 20px',
                backgroundColor: '#4CAF50',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                marginRight: '10px'
              }}
            >
              ‚úÖ –ü—Ä–∏–Ω—è—Ç—å
            </button>
            <button
              onClick={handleRejectCall}
              style={{
                padding: '10px 20px',
                backgroundColor: '#f44336',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}
            >
              ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default App;