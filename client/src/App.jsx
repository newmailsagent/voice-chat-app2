import { useEffect, useState, useRef } from 'react';
import './App.css';
import { io } from 'socket.io-client';
import { WebRTCManager } from './webrtc.js';

const socket = io('https://pobesedka.ru', {
  transports: ['websocket'],
  secure: true
});

function App() {
  const [users, setUsers] = useState([]);
  const [currentUser, setCurrentUser] = useState(null);
  const [incomingCall, setIncomingCall] = useState(null);
  const [callStatus, setCallStatus] = useState('idle'); // 'idle' | 'calling' | 'in_call'
  const [loginId, setLoginId] = useState('');
  const [loginError, setLoginError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [localStream, setLocalStream] = useState(null);
  const [remoteStream, setRemoteStream] = useState(null);
  const [isWebRTCReady, setIsWebRTCReady] = useState(false);

  const webrtcManager = useRef(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–∫–µ—Ç-—Å–æ–±—ã—Ç–∏–π
  useEffect(() => {
    fetch('http://109.73.201.238:8080/api/users')
      .then(response => response.json())
      .then(data => setUsers(data));

    socket.on('auth:success', (data) => {
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', data.user);
      setCurrentUser(data.user);
      setLoginError('');
      setIsLoading(false);
    });

    socket.on('auth:failed', (data) => {
      alert('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + data.message);
      setIsLoading(false);
    });

    socket.on('call:incoming', (data) => {
      console.log('üìû –í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤:', data);
      setIncomingCall(data); // data.offer —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å!
    });

    socket.on('call:accepted', (data) => {
      console.log('‚úÖ –í—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç:', data);
      setCallStatus('in_call');
    });

    socket.on('call:rejected', (data) => {
      console.log('‚ùå –í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω');
      setCallStatus('idle');
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤');
    });

    socket.on('call:failed', (data) => {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞:', data);
      setCallStatus('idle');
      alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è: ${data.reason}`);
    });

    socket.on('call:initiated', (data) => {
      console.log('üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—ã–∑–æ–≤...');
    });

    // WebRTC —Å–æ–±—ã—Ç–∏—è (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–µ)
    socket.on('webrtc:offer', async (data) => {
      console.log('üì• [RTC] –ü–æ–ª—É—á–µ–Ω offer –æ—Ç:', data.from);
      if (webrtcManager.current) {
        await webrtcManager.current.handleOffer(data.offer, data.from);
      }
    });

    socket.on('webrtc:answer', async (data) => {
      console.log('üì• [RTC] –ü–æ–ª—É—á–µ–Ω answer –æ—Ç:', data.from);
      if (webrtcManager.current) {
        await webrtcManager.current.handleAnswer(data.answer);
      }
    });

    socket.on('webrtc:ice-candidate', async (data) => {
      console.log('üì• [RTC] –ü–æ–ª—É—á–µ–Ω ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç:', data.from);
      if (webrtcManager.current) {
        await webrtcManager.current.addIceCandidate(data.candidate);
      }
    });

    return () => {
      socket.off('auth:success');
      socket.off('auth:failed');
      socket.off('call:incoming');
      socket.off('call:accepted');
      socket.off('call:rejected');
      socket.off('call:failed');
      socket.off('call:initiated');
      socket.off('webrtc:offer');
      socket.off('webrtc:answer');
      socket.off('webrtc:ice-candidate');
    };
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebRTC
  useEffect(() => {
    if (!currentUser) return;

    try {
      webrtcManager.current = new WebRTCManager(socket, currentUser.id);
      webrtcManager.current.onRemoteStream = setRemoteStream;

      webrtcManager.current.init()
        .then((stream) => {
          setLocalStream(stream);
          setIsWebRTCReady(true);
          console.log('‚úÖ WebRTC –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        })
        .catch(error => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebRTC:', error);
          alert('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ' + error.message);
          setIsWebRTCReady(false);
        });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebRTCManager:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WebRTC –º–µ–Ω–µ–¥–∂–µ—Ä');
    }

    return () => {
      if (webrtcManager.current) {
        webrtcManager.current.close();
        webrtcManager.current = null;
      }
      setLocalStream(null);
      setRemoteStream(null);
      setIsWebRTCReady(false);
    };
  }, [currentUser]);

  // –í—Ö–æ–¥
  const handleLogin = () => {
    if (!loginId.trim()) {
      setLoginError('–í–≤–µ–¥–∏—Ç–µ ID');
      return;
    }

    setLoginError('');
    setIsLoading(true);

    fetch('http://109.73.201.238:8080/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId: loginId })
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          socket.emit('user_online', loginId);
        } else {
          alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          setIsLoading(false);
        }
      })
      .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
        setIsLoading(false);
      });
  };

  // –ò—Å—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤ ‚Äî ‚òÖ‚òÖ‚òÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞—ë–º offer –≤ call:start ‚òÖ‚òÖ‚òÖ
  const handleCallUser = async (targetUserId) => {
    if (!currentUser) {
      alert('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É');
      return;
    }

    if (!webrtcManager.current) {
      alert('WebRTC –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    if (!isWebRTCReady) {
      alert('WebRTC –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...');
      return;
    }

    setCallStatus('calling');
    try {
      console.log('üìû –°–æ–∑–¥–∞—ë–º offer –¥–ª—è:', targetUserId);
      const offer = await webrtcManager.current.createOffer(targetUserId);

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ —Å offer');
      socket.emit('call:start', {
        targetUserId,
        offer // ‚úÖ –ö–ª—é—á–µ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–∑–æ–≤–∞:', error);
      setCallStatus('idle');
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –≤—ã–∑–æ–≤: ' + error.message);
    }
  };

  // –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤
  const handleAcceptCall = async () => {
    if (!incomingCall || !webrtcManager.current) return;

    try {
      console.log('‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—ã–∑–æ–≤ –æ—Ç:', incomingCall.from);
      console.log('üì• Offer:', incomingCall.offer); // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å {type, sdp}

      await webrtcManager.current.handleOffer(incomingCall.offer, incomingCall.from);
      socket.emit('call:accept', { from: incomingCall.from });
      setIncomingCall(null);
      setCallStatus('in_call');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤: ' + error.message);
    }
  };

  // –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤
  const handleRejectCall = () => {
    if (!incomingCall) return;

    console.log('‚ùå –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—ã–∑–æ–≤ –æ—Ç:', incomingCall.from);
    socket.emit('call:reject', { from: incomingCall.from });
    setIncomingCall(null);
    setCallStatus('idle');
  };

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–∑–æ–≤
  const handleEndCall = () => {
    console.log('üì¥ –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–∑–æ–≤');
    if (webrtcManager.current) {
      webrtcManager.current.close();
    }
    setCallStatus('idle');
    setRemoteStream(null);
    socket.emit('call:end');
  };

  // –≠–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
  if (!currentUser) {
    return (
      <div className="App" style={{ padding: '20px', fontFamily: 'Arial' }}>
        <h1>üìû –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤</h1>
        <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ ID: <strong>alex, maria, john</strong></p>

        <input
          type="text"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID"
          value={loginId}
          onChange={(e) => setLoginId(e.target.value.trim())}
          disabled={isLoading}
          style={{ padding: '10px', fontSize: '16px', marginRight: '10px' }}
        />

        <button onClick={handleLogin} disabled={isLoading} style={{ padding: '10px 20px', fontSize: '16px' }}>
          {isLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
        </button>

        {loginError && <div style={{ color: 'red', marginTop: '10px' }}>{loginError}</div>}
      </div>
    );
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  return (
    <div className="App" style={{ padding: '20px', fontFamily: 'Arial' }}>
      <h1>üìû –í–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)</h1>
      <p>–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: <strong>{currentUser.username}</strong> (ID: {currentUser.id})</p>

      <div style={{ marginBottom: '10px', color: isWebRTCReady ? 'green' : 'orange' }}>
        WebRTC: {isWebRTCReady ? '‚úÖ –ì–æ—Ç–æ–≤' : '‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...'}
      </div>

      <div style={{ marginBottom: '20px' }}>
        <strong>–°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞: </strong>
        {callStatus === 'idle' && <span>üü¢ –ì–æ—Ç–æ–≤ –∫ –∑–≤–æ–Ω–∫–∞–º</span>}
        {callStatus === 'calling' && <span>üü° –ó–≤–æ–Ω–æ–∫...</span>}
        {callStatus === 'in_call' && <span>üî¥ –í –∑–≤–æ–Ω–∫–µ</span>}
      </div>

      {/* –ó–∞–≥–ª—É—à–∫–∏ –≤–∏–¥–µ–æ */}
      <div style={{ display: 'flex', gap: '20px', flexWrap: 'wrap', marginBottom: '30px' }}>
        <div>
          <h4>üìπ –í–∞—à–µ –≤–∏–¥–µ–æ (–∑–∞–≥–ª—É—à–∫–∞)</h4>
          <div style={{ width: '320px', height: '240px', background: '#ccc', display: 'flex', alignItems: 'center', justifyContent: 'center', border: '2px solid green', borderRadius: '8px' }}>
            {isWebRTCReady ? 'WebRTC –∞–∫—Ç–∏–≤–µ–Ω' : '–û–∂–∏–¥–∞–Ω–∏–µ...'}
          </div>
        </div>

        {remoteStream && (
  <div>
    <h4>üîä –ê—É–¥–∏–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞</h4>
    <audio
      ref={audio => { if (audio) audio.srcObject = remoteStream; }}
      autoPlay
      controls
      style={{ width: '100%', height: '50px', border: '2px solid blue', borderRadius: '8px' }}
    />
  </div>
)}
      </div>

      {callStatus === 'in_call' && (
        <button
          onClick={handleEndCall}
          style={{
            padding: '12px 24px',
            fontSize: '18px',
            backgroundColor: '#f44336',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            cursor: 'pointer',
            marginBottom: '20px'
          }}
        >
          üìµ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫
        </button>
      )}

      <h2>üë• –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</h2>
      <ul style={{ listStyle: 'none', padding: '0' }}>
        {users.map(user => (
          <li key={user.id} style={{ margin: '10px 0', display: 'flex', alignItems: 'center' }}>
            <strong>{user.username}</strong> (ID: {user.id})
            {user.id !== currentUser.id && (
              <button
                onClick={() => handleCallUser(user.id)}
                disabled={callStatus !== 'idle' || !isWebRTCReady}
                style={{
                  marginLeft: '15px',
                  padding: '8px 16px',
                  backgroundColor: '#2196F3',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: (callStatus !== 'idle' || !isWebRTCReady) ? 'not-allowed' : 'pointer'
                }}
              >
                {isWebRTCReady ? '–ü–æ–∑–≤–æ–Ω–∏—Ç—å' : '–û–∂–∏–¥–∞–Ω–∏–µ...'}
              </button>
            )}
          </li>
        ))}
      </ul>

      {/* –í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤ */}
      {incomingCall && (
        <div style={{
          background: '#fff3cd',
          border: '2px solid #ffeaa7',
          padding: '20px',
          borderRadius: '8px',
          marginTop: '20px'
        }}>
          <h3>üìû –í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤!</h3>
          <p><strong>–û—Ç:</strong> {incomingCall.fromUsername} (ID: {incomingCall.from})</p>
          <div>
            <button
              onClick={handleAcceptCall}
              style={{
                padding: '10px 20px',
                backgroundColor: '#4CAF50',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                marginRight: '10px'
              }}
            >
              ‚úÖ –ü—Ä–∏–Ω—è—Ç—å
            </button>
            <button
              onClick={handleRejectCall}
              style={{
                padding: '10px 20px',
                backgroundColor: '#f44336',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}
            >
              ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default App;